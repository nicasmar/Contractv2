@page "/"

@using Contractv2.Services;
@using Syncfusion.Blazor.Inputs;
@using System.IO;
@using Syncfusion.Blazor.Inputs;
@using System.Text;

@inject Contractv2.Services.FileConverterService FileConverterService
@inject Microsoft.JSInterop.IJSRuntime JS
@inject Supabase.Client SupabaseClient
@inject ChangelogService ChangelogService

@if (_modal)
{
    <div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <!--
          Background backdrop, show/hide based on modal state.

          Entering: "ease-out duration-300"
            From: "opacity-0"
            To: "opacity-100"
          Leaving: "ease-in duration-200"
            From: "opacity-100"
            To: "opacity-0"
        -->
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

        <div class="fixed inset-0 z-10 overflow-y-auto">
            <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                <!--
                  Modal panel, show/hide based on modal state.

                  Entering: "ease-out duration-300"
                    From: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                    To: "opacity-100 translate-y-0 sm:scale-100"
                  Leaving: "ease-in duration-200"
                    From: "opacity-100 translate-y-0 sm:scale-100"
                    To: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                -->
                <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-sm sm:p-6">
                    <div>
                        <div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100">
                            <!-- Heroicon name: outline/check -->
                            <svg class="h-6 w-6 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
                            </svg>
                        </div>
                        <div class="mt-3 text-center sm:mt-5">
                            <h3 class="text-lg font-medium leading-6 text-gray-900" id="modal-title">Payment successful</h3>
                            <div class="mt-2">
                                <SfUploader AutoUpload="false">
                                    <UploaderEvents ValueChange="OnChange"></UploaderEvents>
                                </SfUploader>
                            </div>
                        </div>
                    </div>
                    <div class="mt-5 sm:mt-6">
                        <button type="button"
                            @onclick="@CloseModal"
                            class="inline-flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:text-sm">
                            Go back to dashboard
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<div class="px-4 sm:px-6 lg:px-8">
    <div class="sm:flex sm:items-center">
        <div class="sm:flex-auto">
            <h1 class="text-xl font-semibold text-gray-900">Users</h1>
            <p class="mt-2 text-sm text-gray-700">A list of all the users in your account including their name, title, email and role.</p>
        </div>
        <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
            <button type="button"
                    @onclick="@OpenModal"
                    class="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto">
                Add user
            </button>
        </div>
    </div>
    <div class="mt-8 flex flex-col">
        <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
            <div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
                <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                    <table class="min-w-full divide-y divide-gray-300">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Document Name</th>
                                <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                                    <span class="sr-only">Edit</span>
                                </th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200 bg-white">
                            <tr>
                                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">Lindsay Walton</td>
                                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                    @*<a href="#" class="text-indigo-600 hover:text-indigo-900">Download</a>*@
                                    <button type="button"
                                            class="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto">
                                        Download
                                    </button>
                                </td>
                            </tr>
                            <tr>
                                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">Lindsay Walton</td>
                                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                    <button type="button"
                                            class="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto mr-3">
                                        Change Log
                                    </button>
                                    <button type="button"
                                            class="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto">
                                        Download
                                    </button>
                                </td>
                            </tr>
                            <tr>
                                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">Lindsay Walton</td>
                                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                    <button type="button"
                                            class="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto mr-3">
                                        Change Log
                                    </button>
                                    <button type="button"
                                            class="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto">
                                        Download
                                    </button>
                                </td>
                            </tr>

                            <!-- More people... -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _isLoading = true;
    private bool _modal = false;

    private List<Supabase.Storage.FileObject> _documents = new List<Supabase.Storage.FileObject>();
    private List<Supabase.Storage.FileObject> _docxDocuments = new List<Supabase.Storage.FileObject>();
    private int _docVersion = 0;
    private bool _firstDoc = false;

    private async void OnChange(UploadChangeEventArgs args)
    {
        //Save upload document to path
        foreach (var file in args.Files)
        {
            FileStream filestream = new FileStream("UploadDoc.docx", FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();
        }

        //if first document, upload and return; no changelog is required
        if (_docVersion == 0 && _firstDoc == true)
        {
            await SupabaseClient.Storage.From("demo").Upload("UploadDoc.docx", $"contract1/licence_v{_docVersion}.docx", new Supabase.Storage.FileOptions { CacheControl = "3600", Upsert = false });
            File.Delete("UploadDoc.docx");
            _firstDoc = false;
            return;
        }

        _docVersion++;

        //convert uploaded document to html and save
        MemoryStream uploadHtmlStream = new MemoryStream();
        FileConverterService.ConvertWordToHtml("UploadDoc.docx", ref uploadHtmlStream);
        using (StreamWriter sw = new StreamWriter($"UploadHtml.html"))
        {
            using (StreamReader sr = new StreamReader(uploadHtmlStream, Encoding.UTF8))
            {
                sw.Write(sr.ReadToEnd());
                await uploadHtmlStream.DisposeAsync();
            }
        }

        //download and save former document
        string supaFormerPath = $"contract1/licence_v{(_docVersion - 1)}.docx";
        await SupabaseClient.Storage.From("demo").Download(supaFormerPath, "FormerDoc.docx");

        //convert former document to html and save
        MemoryStream formerHtmlStream = new MemoryStream();
        FileConverterService.ConvertWordToHtml("FormerDoc.docx", ref formerHtmlStream);
        using (StreamWriter sw = new StreamWriter("FormerHtml.html"))
        {
            using (StreamReader sr = new StreamReader(formerHtmlStream, Encoding.UTF8))
            {
                sw.Write(sr.ReadToEnd());
                await formerHtmlStream.DisposeAsync();
            }
        }

        //Get htmls' diff and save to path
        ChangelogService.GetHtmlDifference("FormerHtml.html", "UploadHtml.html", "Changelog.html");

        //upload "upload" and changelog
        await SupabaseClient.Storage.From("demo").Upload("Changelog.html", $"contract1/changelog_v{_docVersion}.html", new Supabase.Storage.FileOptions { CacheControl = "3600", Upsert = false });
        await SupabaseClient.Storage.From("demo").Upload("UploadDoc.docx", $"contract1/licence_v{_docVersion}.docx", new Supabase.Storage.FileOptions { CacheControl = "3600", Upsert = false });

        File.Delete("UploadDoc.docx");
        File.Delete("UploadHtml.html");
        File.Delete("FormerDoc.docx");
        File.Delete("FormerHtml.html");
        File.Delete("Changelog.html");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = true;

            _documents = await SupabaseClient.Storage.From("demo").List("contract1/", null);

            foreach (Supabase.Storage.FileObject document in _documents)
            {
                if (document.Name!.Contains(".emptyFolderPlaceholder"))
                {
                    _docVersion = 0;
                    _firstDoc = true;
                    _isLoading = false;
                    return;
                }
                if (document.Name!.Contains(".docx"))
                {
                    _docVersion++;
                    _docxDocuments.Add(document);
                }
            }
            ///removing 1, as doc count starts on 0
            _docVersion--;

            _isLoading = false;
        }
    }

    private async void ConvertHtmltoWord()
    {
        //_documentStream = DocConverter.ConvertHTMLtoWord(_path);
        //await JS.SaveAs("HTMLtoWord.docx", _documentStream.ToArray());
    }

    private async void OpenModal()
    {
        _modal = true;
    }

    private void CloseModal()
    {
        _modal = false;
    }
}